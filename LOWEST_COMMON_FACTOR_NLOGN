#include<bits/stdc++.h>
#define lli long long int
#define mod 1000000007
#define MAXLOG 19
using namespace std;

int dp[100009][20];
int parent[100009];
int level[100009];
int sz[100009];
vector<vector<int>> adj(100009);

int dfs(int r,int p,int l){
	level[r] = l;
	for(auto q: adj[r]){
		if(q!=p){
			parent[q] = r;
			sz[r] += dfs(q,r,l+1);;
		}
	}
	return sz[r] + 1;
}

void createArray(int n){
	for(int i=1;i<=n;++i){
		dp[i][0] = parent[i];
	}
	for(int i=1;i<=MAXLOG;++i){
		for(int j=1;j<=n;++j){
			dp[j][i] = dp[dp[j][i-1]][i-1];
		}
	}
}

int lca(int u,int v,int n){
	if(level[u]>level[v])	swap(u,v);
	if(u==v)	return u;
	int dist = level[v] - level[u];
	while(dist>0){
		v = dp[v][(int)log2(dist)];
		dist = level[v] - level[u];
	}
	//cout<<v<<endl;
	if(u==v)	return u;
	for(int j = MAXLOG;j>=0;--j){
		if(dp[u][j]!=0&&(dp[v][j]!=dp[u][j])){
			v = dp[v][j];
			u = dp[u][j];
		}
	}
	return parent[u];
}



int main(){
	int n,m;
	cin>>n;
	for(int i=0;i<n-1;++i){
		int x,y;
		cin>>x>>y;
		adj[x].push_back(y);
		adj[y].push_back(x);
	}
	dfs(1,-1,0);
	createArray(n);
	cin>>m;
	while(m--){
		int u,v;
		cin>>u>>v;
		if(level[u]>level[v])	swap(u,v);
		int f = lca(u,v,n);
		//cout<<f<<endl;
		if(u==v){
			cout<<sz[1]+1<<endl;
		}
		else if(level[u]-level[f]==level[v]-level[f]){
			int dv,du;
			dv = level[v]-level[f];
			du = level[u]-level[f];
			int lvl = level[f];
				for(int j = MAXLOG;j>=0;--j){
					if(dp[u][j]!=0&&level[dp[u][j]]>lvl){
						u = dp[u][j];
					}
				}
				for(int j = MAXLOG;j>=0;--j){
					if(dp[v][j]!=0&&level[dp[v][j]]>lvl){
						v = dp[v][j];
					}
				}
				//cout<<u<<' '<<v<<endl;
			cout<<sz[1]+1-(sz[u]+sz[v]+2)<<endl;
		}
		else{
			int dv,du;
			dv = level[v]-level[f];
			du = level[u]-level[f];
			if((du+dv+1)%2==0){
				cout<<0<<endl;
			}
			else{
				int p = (du+dv-2+1)/2;
				p = p - du;
				int lvl = level[f] + (p+1);
				//cout<<lvl<<endl;
				int t = v;
				for(int j = MAXLOG;j>=0;--j){
					if(dp[t][j]!=0&&level[dp[t][j]]>lvl){
						t = dp[t][j];
					}
				}
				//cout<<t<<' '<<parent[t]<<' '<<sz[t];
				cout<<sz[parent[t]]+1-(sz[t]+1)<<endl;	
			}
		}
	}
}
